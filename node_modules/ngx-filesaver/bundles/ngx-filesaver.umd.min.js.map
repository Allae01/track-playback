{"version":3,"sources":["ng://ngx-filesaver/src/filesaver.service.ts","ng://ngx-filesaver/src/filesaver.directive.ts","ng://ngx-filesaver/src/filesaver.module.ts"],"names":["FileSaverService","Object","defineProperty","prototype","Blob","e","genType","fileName","lastIndexOf","type","substr","save","blob","filtType","Error","saveAs","this","decodeURI","saveText","txt","__decorate","Injectable","providedIn","FileSaverDirective","el","fss","httpClient","method","success","EventEmitter","error","isFileSaverSupported","nativeElement","classList","add","getName","res","headers","get","_click","_this","req","http","params","HttpParams","query","item","set","request","url","observe","responseType","header","setDisabled","subscribe","status","body","size","emit","err","disabled","Input","Observable","Output","HostListener","__decorate$1","Directive","selector","exportAs","ElementRef","HttpClient","FileSaverModule","__decorate$2","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { saveAs } from 'file-saver';\n\n@Injectable({ providedIn: 'root' })\nexport class FileSaverService {\n  get isFileSaverSupported(): boolean {\n    try {\n      return !!new Blob();\n    } catch (e) {\n      return false;\n    }\n  }\n\n  genType(fileName?: string): string {\n    if (!fileName || fileName.lastIndexOf('.') === -1) {\n      return 'text/plain';\n    }\n    const type = fileName.substr(fileName.lastIndexOf('.') + 1);\n    switch (type) {\n      case 'txt':\n        return 'text/plain';\n      case 'xml':\n      case 'html':\n        return `text/${type}`;\n      case 'json':\n        return 'octet/stream';\n      default:\n        return `application/${type}`;\n    }\n  }\n\n  save(blob: Blob, fileName?: string, filtType?: string): void {\n    if (!blob) {\n      throw new Error('Muse spcify blod argument');\n    }\n\n    saveAs(new Blob([blob], { type: filtType || blob.type || this.genType(fileName) }), decodeURI(fileName || 'download'));\n  }\n\n  saveText(txt: string, fileName?: string): void {\n    const blob = new Blob([txt]);\n    this.save(blob, fileName);\n  }\n}\n","import { Directive, ElementRef, Input, HostListener, EventEmitter, Output } from '@angular/core';\nimport { HttpClient, HttpParams, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { FileSaverService } from './filesaver.service';\n\n@Directive({\n  selector: '[fileSaver]',\n  exportAs: 'fileSaver',\n})\nexport class FileSaverDirective {\n  @Input() method = 'GET';\n  @Input() http: Observable<HttpResponse<Blob>>;\n  @Input() query: any;\n  @Input() header: any;\n  @Input() url: string;\n  @Input() fileName: string;\n  @Output() readonly success = new EventEmitter<HttpResponse<Blob>>();\n  @Output() readonly error = new EventEmitter<any>();\n\n  constructor(private el: ElementRef<HTMLButtonElement>, private fss: FileSaverService, private httpClient: HttpClient) {\n    if (!fss.isFileSaverSupported) {\n      el.nativeElement.classList.add(`filesaver__not-support`);\n    }\n  }\n\n  private getName(res: HttpResponse<Blob>) {\n    return decodeURI(this.fileName || res.headers.get('filename') || res.headers.get('x-filename'));\n  }\n\n  @HostListener('click')\n  _click() {\n    if (!this.fss.isFileSaverSupported) {\n      return;\n    }\n    let req = this.http;\n    if (!req) {\n      const params = new HttpParams();\n      const query = this.query || {};\n      // tslint:disable-next-line:forin\n      for (const item in query) {\n        params.set(item, query[item]);\n      }\n\n      req = this.httpClient.request(this.method, this.url, {\n        observe: 'response',\n        responseType: 'blob',\n        headers: this.header,\n        params,\n      });\n    }\n\n    this.setDisabled(true);\n    req.subscribe(\n      res => {\n        if (res.status !== 200 || res.body.size <= 0) {\n          this.error.emit(res);\n          return;\n        }\n        this.fss.save(res.body, this.getName(res));\n        this.success.emit(res);\n      },\n      err => this.error.emit(err),\n      () => this.setDisabled(false),\n    );\n  }\n\n  private setDisabled(status: boolean) {\n    const el = this.el.nativeElement;\n    el.disabled = status;\n    el.classList[status ? 'add' : 'remove'](`filesaver__disabled`);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { FileSaverDirective } from './filesaver.directive';\n\n@NgModule({\n  declarations: [FileSaverDirective],\n  exports: [FileSaverDirective],\n})\nexport class FileSaverModule {}\n"]}