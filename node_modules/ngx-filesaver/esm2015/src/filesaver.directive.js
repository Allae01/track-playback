var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, ElementRef, Input, HostListener, EventEmitter, Output } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http';
import { Observable } from 'rxjs';
import { FileSaverService } from './filesaver.service';
let FileSaverDirective = class FileSaverDirective {
    constructor(el, fss, httpClient) {
        this.el = el;
        this.fss = fss;
        this.httpClient = httpClient;
        this.method = 'GET';
        this.success = new EventEmitter();
        this.error = new EventEmitter();
        if (!fss.isFileSaverSupported) {
            el.nativeElement.classList.add(`filesaver__not-support`);
        }
    }
    getName(res) {
        return decodeURI(this.fileName || res.headers.get('filename') || res.headers.get('x-filename'));
    }
    _click() {
        if (!this.fss.isFileSaverSupported) {
            return;
        }
        let req = this.http;
        if (!req) {
            const params = new HttpParams();
            const query = this.query || {};
            // tslint:disable-next-line:forin
            for (const item in query) {
                params.set(item, query[item]);
            }
            req = this.httpClient.request(this.method, this.url, {
                observe: 'response',
                responseType: 'blob',
                headers: this.header,
                params,
            });
        }
        this.setDisabled(true);
        req.subscribe(res => {
            if (res.status !== 200 || res.body.size <= 0) {
                this.error.emit(res);
                return;
            }
            this.fss.save(res.body, this.getName(res));
            this.success.emit(res);
        }, err => this.error.emit(err), () => this.setDisabled(false));
    }
    setDisabled(status) {
        const el = this.el.nativeElement;
        el.disabled = status;
        el.classList[status ? 'add' : 'remove'](`filesaver__disabled`);
    }
};
__decorate([
    Input(),
    __metadata("design:type", Object)
], FileSaverDirective.prototype, "method", void 0);
__decorate([
    Input(),
    __metadata("design:type", Observable)
], FileSaverDirective.prototype, "http", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FileSaverDirective.prototype, "query", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], FileSaverDirective.prototype, "header", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FileSaverDirective.prototype, "url", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], FileSaverDirective.prototype, "fileName", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FileSaverDirective.prototype, "success", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], FileSaverDirective.prototype, "error", void 0);
__decorate([
    HostListener('click'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], FileSaverDirective.prototype, "_click", null);
FileSaverDirective = __decorate([
    Directive({
        selector: '[fileSaver]',
        exportAs: 'fileSaver',
    }),
    __metadata("design:paramtypes", [ElementRef, FileSaverService, HttpClient])
], FileSaverDirective);
export { FileSaverDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZXNhdmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1maWxlc2F2ZXIvIiwic291cmNlcyI6WyJzcmMvZmlsZXNhdmVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDakcsT0FBTyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQWdCLE1BQU0sc0JBQXNCLENBQUM7QUFDNUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNsQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQU12RCxJQUFhLGtCQUFrQixHQUEvQixNQUFhLGtCQUFrQjtJQVU3QixZQUFvQixFQUFpQyxFQUFVLEdBQXFCLEVBQVUsVUFBc0I7UUFBaEcsT0FBRSxHQUFGLEVBQUUsQ0FBK0I7UUFBVSxRQUFHLEdBQUgsR0FBRyxDQUFrQjtRQUFVLGVBQVUsR0FBVixVQUFVLENBQVk7UUFUM0csV0FBTSxHQUFHLEtBQUssQ0FBQztRQU1MLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBc0IsQ0FBQztRQUNqRCxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUdqRCxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFO1lBQzdCLEVBQUUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1NBQzFEO0lBQ0gsQ0FBQztJQUVPLE9BQU8sQ0FBQyxHQUF1QjtRQUNyQyxPQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxD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IEhvc3RMaXN0ZW5lciwgRXZlbnRFbWl0dGVyLCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBQYXJhbXMsIEh0dHBSZXNwb25zZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEZpbGVTYXZlclNlcnZpY2UgfSBmcm9tICcuL2ZpbGVzYXZlci5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2ZpbGVTYXZlcl0nLFxuICBleHBvcnRBczogJ2ZpbGVTYXZlcicsXG59KVxuZXhwb3J0IGNsYXNzIEZpbGVTYXZlckRpcmVjdGl2ZSB7XG4gIEBJbnB1dCgpIG1ldGhvZCA9ICdHRVQnO1xuICBASW5wdXQoKSBodHRwOiBPYnNlcnZhYmxlPEh0dHBSZXNwb25zZTxCbG9iPj47XG4gIEBJbnB1dCgpIHF1ZXJ5OiBhbnk7XG4gIEBJbnB1dCgpIGhlYWRlcjogYW55O1xuICBASW5wdXQoKSB1cmw6IHN0cmluZztcbiAgQElucHV0KCkgZmlsZU5hbWU6IHN0cmluZztcbiAgQE91dHB1dCgpIHJlYWRvbmx5IHN1Y2Nlc3MgPSBuZXcgRXZlbnRFbWl0dGVyPEh0dHBSZXNwb25zZTxCbG9iPj4oKTtcbiAgQE91dHB1dCgpIHJlYWRvbmx5IGVycm9yID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZjxIVE1MQnV0dG9uRWxlbWVudD4sIHByaXZhdGUgZnNzOiBGaWxlU2F2ZXJTZXJ2aWNlLCBwcml2YXRlIGh0dHBDbGllbnQ6IEh0dHBDbGllbnQpIHtcbiAgICBpZiAoIWZzcy5pc0ZpbGVTYXZlclN1cHBvcnRlZCkge1xuICAgICAgZWwubmF0aXZlRWxlbWVudC5jbGFzc0xpc3QuYWRkKGBmaWxlc2F2ZXJfX25vdC1zdXBwb3J0YCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXROYW1lKHJlczogSHR0cFJlc3BvbnNlPEJsb2I+KSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSSh0aGlzLmZpbGVOYW1lIHx8IHJlcy5oZWFkZXJzLmdldCgnZmlsZW5hbWUnKSB8fCByZXMuaGVhZGVycy5nZXQoJ3gtZmlsZW5hbWUnKSk7XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdjbGljaycpXG4gIF9jbGljaygpIHtcbiAgICBpZiAoIXRoaXMuZnNzLmlzRmlsZVNhdmVyU3VwcG9ydGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCByZXEgPSB0aGlzLmh0dHA7XG4gICAgaWYgKCFyZXEpIHtcbiAgICAgIGNvbnN0IHBhcmFtcyA9IG5ldyBIdHRwUGFyYW1zKCk7XG4gICAgICBjb25zdCBxdWVyeSA9IHRoaXMucXVlcnkgfHwge307XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6Zm9yaW5cbiAgICAgIGZvciAoY29uc3QgaXRlbSBpbiBxdWVyeSkge1xuICAgICAgICBwYXJhbXMuc2V0KGl0ZW0sIHF1ZXJ5W2l0ZW1dKTtcbiAgICAgIH1cblxuICAgICAgcmVxID0gdGhpcy5odHRwQ2xpZW50LnJlcXVlc3QodGhpcy5tZXRob2QsIHRoaXMudXJsLCB7XG4gICAgICAgIG9ic2VydmU6ICdyZXNwb25zZScsXG4gICAgICAgIHJlc3BvbnNlVHlwZTogJ2Jsb2InLFxuICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcixcbiAgICAgICAgcGFyYW1zLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXREaXNhYmxlZCh0cnVlKTtcbiAgICByZXEuc3Vic2NyaWJlKFxuICAgICAgcmVzID0+IHtcbiAgICAgICAgaWYgKHJlcy5zdGF0dXMgIT09IDIwMCB8fCByZXMuYm9keS5zaXplIDw9IDApIHtcbiAgICAgICAgICB0aGlzLmVycm9yLmVtaXQocmVzKTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5mc3Muc2F2ZShyZXMuYm9keSwgdGhpcy5nZXROYW1lKHJlcykpO1xuICAgICAgICB0aGlzLnN1Y2Nlc3MuZW1pdChyZXMpO1xuICAgICAgfSxcbiAgICAgIGVyciA9PiB0aGlzLmVycm9yLmVtaXQoZXJyKSxcbiAgICAgICgpID0+IHRoaXMuc2V0RGlzYWJsZWQoZmFsc2UpLFxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIHNldERpc2FibGVkKHN0YXR1czogYm9vbGVhbikge1xuICAgIGNvbnN0IGVsID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50O1xuICAgIGVsLmRpc2FibGVkID0gc3RhdHVzO1xuICAgIGVsLmNsYXNzTGlzdFtzdGF0dXMgPyAnYWRkJyA6ICdyZW1vdmUnXShgZmlsZXNhdmVyX19kaXNhYmxlZGApO1xuICB9XG59XG4iXX0=